// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`convert annotated-types: annotated-types 1`] = `
"
<<<<<<<<<<< typescript <<<<<<<<<<<<
/** @model */
type ConvertMe = string;

type SkipMe = number;

/** @model */
interface UserInfo {
  name: string;
  age: number;
}

interface IgnoreMe {
  data: string;
}
===================================
// annotated-types.ts
alias ConvertMe = string;

model UserInfo {
  name: ConvertMe,
  age: float64
};
>>>>>>>>>>> typespec >>>>>>>>>>>>>>"
`;

exports[`convert array-type: array-type 1`] = `
"
<<<<<<<<<<< typescript <<<<<<<<<<<<
/** @model */
type StringArray = string[];
===================================
// array-type.ts
alias StringArray<T> = string[];
>>>>>>>>>>> typespec >>>>>>>>>>>>>>"
`;

exports[`convert complex-type: complex-type 1`] = `
"
<<<<<<<<<<< typescript <<<<<<<<<<<<
/** @model */
interface User {
  id: number;
  name: string;
  roles: string[];
  status: "active" | "inactive";
  profile: {
    email: string;
    age?: number;
  };
}
===================================
// complex-type.ts
model User {
  id: float64,
  name: string,
  roles: string[],
  status: "active" | "inactive",
  profile: {
    email: string,
    age?: float64
  }
};
>>>>>>>>>>> typespec >>>>>>>>>>>>>>"
`;

exports[`convert custom-model-names: custom-model-names 1`] = `
"
<<<<<<<<<<< typescript <<<<<<<<<<<<
/** @model CustomGreeting */
type Greeting = string;

/** @model UserProfile */
interface User {
  name: string;
  age: number;
}

/** @model AdminData */
type Admin = User & {
  permissions: string[];
};
===================================
// custom-model-names.ts
alias CustomGreeting = string;

model AdminData {
  name: CustomGreeting,
  age: float64,
  permissions: CustomGreeting[]
};

model UserProfile {
  name: CustomGreeting,
  age: float64
};
>>>>>>>>>>> typespec >>>>>>>>>>>>>>"
`;

exports[`convert generic-types: generic-types 1`] = `
"
<<<<<<<<<<< typescript <<<<<<<<<<<<
/** @model */
interface Container<T> {
  value: T;
  metadata?: Record<string, unknown>;
}

/** @model */
type StringContainer = Container<string>;
/** @model */
type NumberList = Array<number>;
/** @model */
type Dictionary = Record<string, any>;
===================================
// generic-types.ts
model StringContainer<T> {
  value: string,
  metadata?: Record<never, never>
};

alias NumberList<T> = float64[];

alias Dictionary = Record<never, never>;

model Container<T> {
  value: T,
  metadata?: Record<never, never>
};
>>>>>>>>>>> typespec >>>>>>>>>>>>>>"
`;

exports[`convert interface-primitives: interface-primitives 1`] = `
"
<<<<<<<<<<< typescript <<<<<<<<<<<<
/** @model */
interface User {
  id: number;
  name: string;
  isActive: boolean;
}
===================================
// interface-primitives.ts
model User {
  id: float64,
  name: string,
  isActive: boolean
};
>>>>>>>>>>> typespec >>>>>>>>>>>>>>"
`;

exports[`convert intersection-type: intersection-type 1`] = `
"
<<<<<<<<<<< typescript <<<<<<<<<<<<
/** @model */
interface Name {
  first: string;
  last: string;
}

/** @model */
interface Age {
  age: number;
}

/** @model */
type Person = Name & Age;
===================================
// intersection-type.ts
model Person {
  first: string,
  last: string,
  age: float64
};

model Name {
  first: string,
  last: string
};

model Age {
  age: float64
};
>>>>>>>>>>> typespec >>>>>>>>>>>>>>"
`;

exports[`convert literal-types: literal-types 1`] = `
"
<<<<<<<<<<< typescript <<<<<<<<<<<<
/** @model */
type Direction = "north" | "south" | "east" | "west";
type HttpStatus = 200 | 404 | 500;
===================================
// literal-types.ts
alias Direction = "north" | "south" | "east" | "west";
>>>>>>>>>>> typespec >>>>>>>>>>>>>>"
`;

exports[`convert nested-intersection: nested-intersection 1`] = `
"
<<<<<<<<<<< typescript <<<<<<<<<<<<
/** @model */
interface Address {
  street: string;
  city: string;
}

interface Contact {
  email: string;
  phone?: string;
}

interface PersonDetails {
  name: string;
  age: number;
}

type CompleteProfile = PersonDetails & Contact & Address;
===================================
// nested-intersection.ts
model Address {
  street: string,
  city: string
};
>>>>>>>>>>> typespec >>>>>>>>>>>>>>"
`;

exports[`convert optional-properties: optional-properties 1`] = `
"
<<<<<<<<<<< typescript <<<<<<<<<<<<
/** @model */
interface User {
  id: number;
  email?: string;
  nickname?: string | null;
}
===================================
// optional-properties.ts
model User {
  id: float64,
  email?: string,
  nickname?: string
};
>>>>>>>>>>> typespec >>>>>>>>>>>>>>"
`;

exports[`convert simple-type: simple-type 1`] = `
"
<<<<<<<<<<< typescript <<<<<<<<<<<<
/** @model */
type SimpleType = string;
===================================
// simple-type.ts
alias SimpleType = string;
>>>>>>>>>>> typespec >>>>>>>>>>>>>>"
`;

exports[`convert template-literal-types: template-literal-types 1`] = `
"
<<<<<<<<<<< typescript <<<<<<<<<<<<
/** @model */
type Greeting = \`hello \${string}\`;
/** @model */
type EventName = \`\${string}:click\` | \`\${string}:hover\`;
/** @model */
type Color = \`#\${string}\`;
===================================
// template-literal-types.ts
alias Greeting = "hello \${string}";

alias EventName = "\${string}:click" | "\${string}:hover";

alias Color = "#\${string}";
>>>>>>>>>>> typespec >>>>>>>>>>>>>>"
`;

exports[`convert tuple-types: tuple-types 1`] = `
"
<<<<<<<<<<< typescript <<<<<<<<<<<<
/** @model */
type Point = [number, number];
/** @model */
type NamedPoint = [string, number, number];
/** @model */
type MixedTuple = [string, number, boolean?];
===================================
// tuple-types.ts
alias Point = [float64, float64];

alias NamedPoint = [string, float64, float64];

alias MixedTuple = [string, float64, boolean?];
>>>>>>>>>>> typespec >>>>>>>>>>>>>>"
`;

exports[`convert union-type: union-type 1`] = `
"
<<<<<<<<<<< typescript <<<<<<<<<<<<
/** @model */
type Status = "active" | "inactive";
===================================
// union-type.ts
alias Status = "active" | "inactive";
>>>>>>>>>>> typespec >>>>>>>>>>>>>>"
`;
